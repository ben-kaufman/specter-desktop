{% extends "base.jinja" %}

{% block main %}
    <style>
        .wizard-btn {
            width: 200px;
            min-width: 200px;
            max-width: 200px;
            height: 36px;
            margin: auto;
        }
        .helper-btn {
            text-decoration: underline;
            margin: 10px 50px;
        }
    </style>
    <div class="card center hidden" id="step1">
        {% from "components/bitcoin_svg.jinja" import bitcoin_svg %}
        <h1><img src="{{ url_for('static', filename='img/icon.png') }}" style="width: 80px;"/> <img src="{{ url_for('static', filename='img/arrow_right.svg') }}" style="width: 80px;"/>&nbsp;{{ bitcoin_svg('main', 80) }}<br>
        <br>Would you like to setup a new Bitcoin node or connect to an existing one?</h1>
        <p class="hidden warning" id="step1-helper-text">If you have an existing Bitcoin Core node you would like to use, either running locally on this machine or somewhere else, like on Umbrel, myNode, or RaspiBlitz, you can just connect and use it.<br><br>
        Don't have a node? Specter can help you set one up! This wizard will help you get it up and running!</p>
        <div class="row center">
            <p class="explorer-link" id="step1-helper" onclick="toggleHelper('step1')">Unsure? Click here for more info!</p>
            <a class="explorer-link hidden" id="step1-support" href="https://t.me/spectersupport" target="_blank">Still need help?</a>
        </div>
        <br><br>
        <div class="row">
            <a href="{{url_for('settings_endpoint.bitcoin_core')}}" class="btn wizard-btn">Connect existing node</a>
            <button type="button" class="btn wizard-btn" onclick="showStep(2)">Setup a new node</button>
        </div>
    </div>
    <br><br>
    <div class="card center hidden" id="step2">
        <h1><u>Step #2</u><br>Donwload and setup Bitcoin Core</h1>
        <p>This should take between a few seconds to a few minutes, depending on your internet connection...</p>
        <p class="hidden warning" id="step2-helper-text">Here, Specter will download the Bitcoin Core release software, verify signatures to ensure download files can be trusted, and prepare basic configurations of your new Bitcoin Core node.</p>
        <div class="row center">
            <p class="explorer-link" id="step2-helper" onclick="toggleHelper('step2')">Unsure? Click here for more info!</p>
            <p class="explorer-link hidden" id="step2-support">Still need help?</p>
        </div>
        <br><br>
        <div class="row">
            <button type="button" class="btn wizard-btn" id="setup-bitcoind-button" onclick="setupBitcoind()">Start the Setup!</button>
        </div>
    </div>
    <br><br>
    <div class="card center hidden" id="step3">
        <h1><u>Step #3</u><br>Configue your node</h1>
        <p>QuickSync?&nbsp;&nbsp;
            <label class="switch">
                <input type="checkbox" name="quicksync" id="quicksync" onchange="toggleNodeTypeSelect()" checked>
                <span class="slider"></span>
            </label>&nbsp;&nbsp;
            <tool-tip title="What is QuickSync?">
                QuickSync will set up your new node from a...
            </tool-tip>
        </p>
        <div class="hidden" id="select-node-type-div">
            <br>
            <h1>Select node type:</h1>
            <div class="row">
                <label style="position: relative;">
                    <input type="radio" name="node-type" id="node-type-archival" class="hidden" value="archival">
                    <div class="small-card radio">
                        <span style="font-size: 1.2em; font-weight: bold;">Archival Node</span><br>
                        Requires about 400GB of available storage
                    </div>
                </label>
                <label style="position: relative;">
                    <input type="radio" name="node-type" class="hidden" value="pruned" checked>
                    <div class="small-card radio">
                        <span style="font-size: 1.2em; font-weight: bold;">Pruned Node</span><br>
                        Requires about 10GB of available storage<br><br>
                    </div>
                </label>
            </div>
        </div>
        <div class="card hidden">
            <h2 style="text-decoration: underline;">Advanced configurations</h2><br>
            <p>
            Bitcoin Core data directory path:<br>
            <input type="text" id="datadir" name="datadir" type="text" value="{{ specter.config.rpc.datadir }}">
            </p>
        </div>
        <div class="row center">
            <p class="explorer-link" id="step3-helper" onclick="toggleHelper('step3')">Unsure? Click here for more info!</p>
            <p class="explorer-link hidden" id="step3-support">Still need help?</p>
        </div>
        <br><br>
        <div class="row">
            <button type="button" class="btn wizard-btn" id="setup-bitcoind-dir-button" onclick="setupBitcoindDirectory()">Start Syncing!</button>
        </div>
    </div>
    <br><br>
    <div class="card center hidden" id="step4">
        <h1>Setup Complete! Your new node is up and running!</h1><br>
        <a href="{{url_for('about')}}" class="btn wizard-btn">Done</a>
    </div>
    <h1 id="stage-progress-details" class="hidden" style="margin: auto;"></h1>
    <br><br>
{% endblock %}


{% block scripts %}
    <script>
        let currentStep = parseInt('{{step}}');
        document.addEventListener("DOMContentLoaded", function(){
            showStep(currentStep);
        });
        function showStep(step) {
            currentStep = step;
            document.getElementById('step1').classList.add('hidden');
            document.getElementById('step2').classList.add('hidden');
            document.getElementById('step3').classList.add('hidden');
            document.getElementById('step4').classList.add('hidden');
            document.getElementById(`step${step}`).classList.remove('hidden');
        }
        function toggleHelper(step) {
            let helper = document.getElementById(step + "-helper");
            let helperText = document.getElementById(step + "-helper-text");
            let support = document.getElementById(step + "-support");
            if (helperText.classList.contains("hidden")) {
                helper.innerText = "Got it!";
                helperText.classList.remove("hidden");
                support.classList.remove("hidden");
                helper.classList.add("helper-btn");
                support.classList.add("helper-btn");
            } else {
                helper.innerText = "Unsure? Click here for more info!";
                helperText.classList.add("hidden");
                support.classList.add("hidden");
                helper.classList.remove("helper-btn");
                support.classList.remove("helper-btn");
            }
        }

        function toggleNodeTypeSelect() {
            let nodeTypeDiv = document.getElementById('select-node-type-div');
            if (document.getElementById('quicksync').checked) {
                nodeTypeDiv.classList.add('hidden');
            } else {
                nodeTypeDiv.classList.remove('hidden');
            }
        }

        async function setupBitcoind() {
            let url = "{{ url_for('setup_bitcoind') }}"
            var formData = new FormData();
            formData.append('csrf_token', '{{ csrf_token() }}');
            try {
                const response = await fetch(
                    url,
                    {
                        method: 'POST',
                        body: formData
                    }
                );
                if(response.status != 200){
                    showError(await response.text());
                    return;
                }
                const jsonResponse = await response.json();
                if ("success" in jsonResponse) {
                    showNotification(jsonResponse.success);
                    document.getElementById('setup-bitcoind-button').classList.add('hidden');
                    startProgressCheck();
                    return;
                } if (jsonResponse.error == "bitcoind already installed") {
                    showNotification('Bitcoin Core already installed, skipped step.');
                    showStep(++currentStep);
                    return;
                }
                showError(jsonResponse.error, 4000);
            }  catch(e) {
                showError("Failed to download Bitcoin Core...");
                showError(e);
            }
        }

        async function setupBitcoindDirectory() {
            let url = "{{ url_for('setup_bitcoind_directory') }}"
            var formData = new FormData();
            formData.append('csrf_token', '{{ csrf_token() }}');
            formData.append('quicksync', document.getElementById('quicksync').checked);
            formData.append('nodetype', document.getElementById('node-type-archival').checked ? 'archival' : 'pruned');
            try {
                const response = await fetch(
                    url,
                    {
                        method: 'POST',
                        body: formData
                    }
                );
                if(response.status != 200){
                    showError(await response.text());
                    return;
                }
                const jsonResponse = await response.json();
                if ("success" in jsonResponse) {
                    showNotification(jsonResponse.success);
                    document.getElementById('setup-bitcoind-dir-button').classList.add('hidden');
                    startProgressCheck();
                    return;
                }
                showError(jsonResponse.error, 4000);
            }  catch(e) {
                showError("Failed to start Bitcoin Core...");
                showError(e);
            }
        }

        function startProgressCheck() {
            async function fetchStageProgress() {
                try {
                    let url="{{ url_for('get_node_setup_status') }}"
                    const response = await fetch(
                        url,
                        {
                            method: 'GET'
                        }
                    );
                    let result = await response.json();
                    let stage = result.stage;
                    let progress = parseFloat(result.stage_progress);
                    if (progress == -1) {
                        showNotification('Finished successfully');
                        showStep(++currentStep);
                        document.getElementById('stage-progress-details').classList.add('hidden');
                        hidePageOverlay('stage-progress-details');
                        return;
                    }
                    document.getElementById('stage-progress-details').innerHTML = `${stage}<br>`;
                    if (progress > 0) {
                        document.getElementById('stage-progress-details').innerHTML += `<br><br><b style="font-size:0.8em;">Progress: ${progress}%</b>`;
                    }
                    setTimeout(fetchStageProgress, 1000);
                } catch(e) {
                    console.log('Caught error:', e);
                    return { success: false, error: e };
                }
            }
            document.getElementById('stage-progress-details').classList.remove('hidden');
            showPageOverlay('stage-progress-details');
            document.getElementById('stage-progress-details').innerHTML = 'Stating up...';
            setTimeout(fetchStageProgress, 1000);
        }
    </script>
{% endblock %}
